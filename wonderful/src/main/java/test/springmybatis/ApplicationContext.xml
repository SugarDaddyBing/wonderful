<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">


  <!-- 自动扫描 -->
  <context:component-scan base-package="test.springmybatis"></context:component-scan>

  <!-- 引入配置文件 -->
  <bean id="" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="test/springmybatis/jdbc.properties" />
  </bean>

  <!-- 数据源 -->
  <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <!-- 初始化连接池大小、最小、最大 -->
    <property name="initialSize" value="${initialPoolSize}" />
    <property name="minIdle" value="${minPoolSize}" />
    <property name="maxActive" value="${maxPoolSize}" />

    <!-- 获取连接等待超时的时间,单位：毫秒，超过最大空闲时间未使用则连接被丢弃,若为0则永不丢弃。Default: 0 -->
    <property name="maxWait" value="${maxIdleTime}" />

    <!--是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。 -->
    <property name="poolPreparedStatements" value="${poolPreparedStatements}" />
    <!--要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100。 -->
    <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxStatements}" />

    <!-- 用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 testWhileIdle都不会其作用 -->
    <property name="validationQuery" value="${validationQuery}" />
    <!-- 申请连接时执行validationQuery检测连接是否有效，这个配置成true会降低性能 -->
    <property name="testOnBorrow" value="false" />
    <!-- 归还连接时执行validationQuery检测连接是否有效，这个配置成true会降低性能 -->
    <property name="testOnReturn" value="false" />
    <!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
    <property name="testWhileIdle" value="true" />

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

    <!-- 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。 -->
    <!-- 打开removeAbandoned功能 -->
    <property name="removeAbandoned" value="true" />
    <!-- 1800秒，也就是30分钟 -->
    <property name="removeAbandonedTimeout" value="1800" />
    <!-- 关闭abanded连接时输出错误日志 -->
    <property name="logAbandoned" value="true" />
  </bean>

  <!-- ibatis3 工厂类 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation" value="test/springmybatis/mybatis-config.xml" />
    <property name="mapperLocations" value="test/springmybatis/mapper/Mapper.xml" />
  </bean>

  <!-- 扫描mapper路径 不然就得把daomapper 每个配一遍像下面这样 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 指定mapper路径 -->
    <property name="basePackage" value="test.springmybatis.mapper.Mapper" />
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
  </bean>


  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="sqlSessionFactory" />
  </bean>
</beans>